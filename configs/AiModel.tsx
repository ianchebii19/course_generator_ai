import { GoogleGenerativeAI, } from "@google/generative-ai";

  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY!;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  

    export const GenerateCourseLayout_AI = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "create a python biginner course\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "Okay, let's craft a Python beginner course! This will be structured to be progressive, with each module building upon the previous one. We'll focus on clarity and practical application to make learning engaging.\n\n**Course Title: Python for Absolute Beginners: Your First Steps into Programming**\n\n**Target Audience:** Individuals with little to no prior programming experience.\n\n**Course Goal:** To equip beginners with the foundational knowledge and skills to write basic Python programs, understand core programming concepts, and build a solid base for further learning.\n\n**Course Structure (Modules):**\n\n**Module 1: Getting Started & The Basics (Approx. 2-3 hours)**\n\n* **1.1 Introduction to Programming:**\n    * What is programming? Why learn Python?\n    * Overview of programming concepts (input, output, processing).\n    * What can you do with Python? (Web dev, data science, scripting etc.)\n* **1.2 Setting Up Your Environment:**\n    * Installing Python (Download and installation steps for Windows/Mac/Linux).\n    * Understanding the Integrated Development Environment (IDE) - VS Code recommended with Python extension.\n    * Running your first Python program (the classic \"Hello, World!\").\n* **1.3 Data Types:**\n    * Numbers (Integers, Floats).\n    * Strings (Text).\n    * Boolean values (True/False).\n    * Basic Operations (+, -, *, /, %, **, //) on numbers\n    * String manipulation (concatenation, basic indexing).\n* **1.4 Variables:**\n    * What are variables? How to assign values.\n    * Variable naming conventions.\n    * Using variables to store and manipulate data.\n* **1.5 Input and Output:**\n    * The `print()` function for displaying output.\n    * The `input()` function for getting user input.\n    * Basic string formatting (using f-strings).\n* **1.6 Comments:**\n    * Why comments are important.\n    * Single-line and multi-line comments in Python.\n* **Practice Exercises:** Simple programs to print messages, perform calculations, take user input and display it back.\n\n**Module 2: Control Flow: Making Decisions and Repeating Tasks (Approx. 3-4 hours)**\n\n* **2.1 Boolean Logic:**\n    * Comparison operators (==, !=, >, <, >=, <=).\n    * Logical operators (and, or, not).\n    * Truth tables and understanding complex conditions.\n* **2.2 Conditional Statements: `if`, `elif`, `else`:**\n    * Syntax and usage of `if` statements.\n    * Creating decision-making structures with `elif` and `else`.\n    * Nested `if` statements.\n* **2.3 Loops: `for` and `while`:**\n    * The `for` loop for iterating over a sequence (e.g., strings).\n    * The `range()` function for generating a sequence of numbers.\n    * The `while` loop for repeating code until a condition is false.\n    * Understanding the concept of loop control variables.\n* **2.4 `break` and `continue` Statements:**\n    * Breaking out of loops with `break`.\n    * Skipping to the next iteration with `continue`.\n* **Practice Exercises:**\n    * Programs to check numbers for even/odd, eligibility based on age, simple text games and calculators using loops and conditions.\n\n**Module 3: Data Structures: Organizing Data (Approx. 4-5 hours)**\n\n* **3.1 Lists:**\n    * Creating and accessing lists.\n    * Modifying lists (appending, inserting, removing elements).\n    * List slicing and common list methods (len(), sort(), reverse()).\n    * List comprehension (introductory level).\n* **3.2 Tuples:**\n    * Creating and accessing tuples.\n    * Immutability of tuples and when to use them.\n    * Tuple unpacking.\n* **3.3 Dictionaries:**\n    * Creating and accessing dictionaries using key-value pairs.\n    * Adding, modifying, and removing dictionary entries.\n    * Using `keys()`, `values()`, and `items()` methods.\n* **3.4 Sets:**\n    * Creating and working with Sets (unique collection)\n    * Set operations (union, intersection, difference).\n* **3.5 Nested data Structures:**\n    * Working with lists of lists (2D lists/Matrices), lists of dictionaries etc.\n* **Practice Exercises:**\n    * Programs to process lists of numbers, store and retrieve information using dictionaries, and basic data manipulation.\n\n**Module 4: Functions: Organizing Code (Approx. 3-4 hours)**\n\n* **4.1 Introduction to Functions:**\n    * Why use functions? Code reusability and modularity.\n    * Defining functions with the `def` keyword.\n    * Function parameters and arguments.\n* **4.2 Return values:**\n    * Returning values from functions.\n    * Using the `return` statement.\n    * Understanding return types.\n* **4.3 Function Scope:**\n    * Local vs. global variables.\n    * Understanding how scope affects variable access.\n* **4.4 Built-in Functions:**\n    * Introduction to common built-in functions (e.g., `len()`, `sum()`, `abs()`, `max()`, `min()`).\n* **4.5 Working with Modules:**\n    * Introduction to Modules and import statement\n    * Import commonly used modules like math, random and use their functions.\n* **Practice Exercises:**\n    *  Creating functions to perform specific tasks, writing reusable code, creating mini projects using functions and some basic built-in modules.\n\n**Module 5: Basic File Handling (Approx. 2-3 hours)**\n\n* **5.1 Reading Files:**\n    * Opening and reading files with `open()`.\n    * Reading the entire file or line by line.\n    * Different file reading modes (e.g., 'r').\n* **5.2 Writing Files:**\n    * Opening files for writing with `open()`.\n    * Writing data to a file (e.g., string data).\n    * File writing modes (e.g., 'w', 'a').\n* **5.3 Using `with` Statement:**\n    * Working with files using the `with` statement (Automatic file closing).\n* **5.4 Error Handling (Basic):**\n    * Introduction to try and except statement.\n* **Practice Exercises:**\n    * Programs to read data from a file, process it, and write the result to another file, simple text processing like counting words etc.\n\n**Project:**\n\n* **End-of-course mini-project:** A simple game, text-based application, or a small data processing task combining the concepts learned. Examples:\n    * Simple number guessing game.\n    * Basic to-do list manager.\n    * A program to analyze a simple CSV file.\n\n**Learning Resources:**\n\n*   **Online Interactive Platforms:**  Codecademy (Python course), freecodecamp.org\n*   **Official Python Website:** python.org (Documentation and tutorials)\n*   **Textbooks (Optional):** \"Python Crash Course\" by Eric Matthes or \"Automate the Boring Stuff with Python\" by Al Sweigart\n\n**Key Points for the Instructor:**\n\n*   **Hands-on:** Emphasize hands-on coding with lots of examples and exercises.\n*   **Clarity:** Use clear and simple language. Avoid jargon.\n*   **Pacing:** Go at a pace suitable for beginners.\n*   **Debugging:** Teach basic debugging techniques using print statements and the IDE's debugger.\n*   **Motivation:** Keep the course engaging and relevant by showing real-world applications.\n*   **Support:** Encourage questions and provide assistance.\n\n**How to Deliver This Course:**\n\n*   **In-person classes:** You could deliver this in a classroom setting with hands-on activities.\n*   **Online workshops:** Use video conferencing for interactive online sessions.\n*   **Self-paced learning:** Provide the material as a series of modules for students to work through on their own with a forum for questions.\n\nThis detailed outline should provide a great starting point for a comprehensive Python beginner course. Remember to adapt it to the specific needs of your students and always emphasize the importance of practicing and exploring further. Good luck!\n"
              }
          ],
        },
      ],
    });
  
    //const result = chatSession.sendMessage("INSERT_INPUT_HERE");
    
  
      export const GenerateChapterContent_AI = model.startChat({
        generationConfig,
        history: [
          {
            role: "user",
            parts: [
              {text: "create a python biginner course\n"},
            ],
          },
          {
            role: "model",
            parts: [
              {text: "Okay, let's craft a Python beginner course! This will be structured to be progressive, with each module building upon the previous one. We'll focus on clarity and practical application to make learning engaging.\n\n**Course Title: Python for Absolute Beginners: Your First Steps into Programming**\n\n**Target Audience:** Individuals with little to no prior programming experience.\n\n**Course Goal:** To equip beginners with the foundational knowledge and skills to write basic Python programs, understand core programming concepts, and build a solid base for further learning.\n\n**Course Structure (Modules):**\n\n**Module 1: Getting Started & The Basics (Approx. 2-3 hours)**\n\n* **1.1 Introduction to Programming:**\n    * What is programming? Why learn Python?\n    * Overview of programming concepts (input, output, processing).\n    * What can you do with Python? (Web dev, data science, scripting etc.)\n* **1.2 Setting Up Your Environment:**\n    * Installing Python (Download and installation steps for Windows/Mac/Linux).\n    * Understanding the Integrated Development Environment (IDE) - VS Code recommended with Python extension.\n    * Running your first Python program (the classic \"Hello, World!\").\n* **1.3 Data Types:**\n    * Numbers (Integers, Floats).\n    * Strings (Text).\n    * Boolean values (True/False).\n    * Basic Operations (+, -, *, /, %, **, //) on numbers\n    * String manipulation (concatenation, basic indexing).\n* **1.4 Variables:**\n    * What are variables? How to assign values.\n    * Variable naming conventions.\n    * Using variables to store and manipulate data.\n* **1.5 Input and Output:**\n    * The `print()` function for displaying output.\n    * The `input()` function for getting user input.\n    * Basic string formatting (using f-strings).\n* **1.6 Comments:**\n    * Why comments are important.\n    * Single-line and multi-line comments in Python.\n* **Practice Exercises:** Simple programs to print messages, perform calculations, take user input and display it back.\n\n**Module 2: Control Flow: Making Decisions and Repeating Tasks (Approx. 3-4 hours)**\n\n* **2.1 Boolean Logic:**\n    * Comparison operators (==, !=, >, <, >=, <=).\n    * Logical operators (and, or, not).\n    * Truth tables and understanding complex conditions.\n* **2.2 Conditional Statements: `if`, `elif`, `else`:**\n    * Syntax and usage of `if` statements.\n    * Creating decision-making structures with `elif` and `else`.\n    * Nested `if` statements.\n* **2.3 Loops: `for` and `while`:**\n    * The `for` loop for iterating over a sequence (e.g., strings).\n    * The `range()` function for generating a sequence of numbers.\n    * The `while` loop for repeating code until a condition is false.\n    * Understanding the concept of loop control variables.\n* **2.4 `break` and `continue` Statements:**\n    * Breaking out of loops with `break`.\n    * Skipping to the next iteration with `continue`.\n* **Practice Exercises:**\n    * Programs to check numbers for even/odd, eligibility based on age, simple text games and calculators using loops and conditions.\n\n**Module 3: Data Structures: Organizing Data (Approx. 4-5 hours)**\n\n* **3.1 Lists:**\n    * Creating and accessing lists.\n    * Modifying lists (appending, inserting, removing elements).\n    * List slicing and common list methods (len(), sort(), reverse()).\n    * List comprehension (introductory level).\n* **3.2 Tuples:**\n    * Creating and accessing tuples.\n    * Immutability of tuples and when to use them.\n    * Tuple unpacking.\n* **3.3 Dictionaries:**\n    * Creating and accessing dictionaries using key-value pairs.\n    * Adding, modifying, and removing dictionary entries.\n    * Using `keys()`, `values()`, and `items()` methods.\n* **3.4 Sets:**\n    * Creating and working with Sets (unique collection)\n    * Set operations (union, intersection, difference).\n* **3.5 Nested data Structures:**\n    * Working with lists of lists (2D lists/Matrices), lists of dictionaries etc.\n* **Practice Exercises:**\n    * Programs to process lists of numbers, store and retrieve information using dictionaries, and basic data manipulation.\n\n**Module 4: Functions: Organizing Code (Approx. 3-4 hours)**\n\n* **4.1 Introduction to Functions:**\n    * Why use functions? Code reusability and modularity.\n    * Defining functions with the `def` keyword.\n    * Function parameters and arguments.\n* **4.2 Return values:**\n    * Returning values from functions.\n    * Using the `return` statement.\n    * Understanding return types.\n* **4.3 Function Scope:**\n    * Local vs. global variables.\n    * Understanding how scope affects variable access.\n* **4.4 Built-in Functions:**\n    * Introduction to common built-in functions (e.g., `len()`, `sum()`, `abs()`, `max()`, `min()`).\n* **4.5 Working with Modules:**\n    * Introduction to Modules and import statement\n    * Import commonly used modules like math, random and use their functions.\n* **Practice Exercises:**\n    *  Creating functions to perform specific tasks, writing reusable code, creating mini projects using functions and some basic built-in modules.\n\n**Module 5: Basic File Handling (Approx. 2-3 hours)**\n\n* **5.1 Reading Files:**\n    * Opening and reading files with `open()`.\n    * Reading the entire file or line by line.\n    * Different file reading modes (e.g., 'r').\n* **5.2 Writing Files:**\n    * Opening files for writing with `open()`.\n    * Writing data to a file (e.g., string data).\n    * File writing modes (e.g., 'w', 'a').\n* **5.3 Using `with` Statement:**\n    * Working with files using the `with` statement (Automatic file closing).\n* **5.4 Error Handling (Basic):**\n    * Introduction to try and except statement.\n* **Practice Exercises:**\n    * Programs to read data from a file, process it, and write the result to another file, simple text processing like counting words etc.\n\n**Project:**\n\n* **End-of-course mini-project:** A simple game, text-based application, or a small data processing task combining the concepts learned. Examples:\n    * Simple number guessing game.\n    * Basic to-do list manager.\n    * A program to analyze a simple CSV file.\n\n**Learning Resources:**\n\n*   **Online Interactive Platforms:**  Codecademy (Python course), freecodecamp.org\n*   **Official Python Website:** python.org (Documentation and tutorials)\n*   **Textbooks (Optional):** \"Python Crash Course\" by Eric Matthes or \"Automate the Boring Stuff with Python\" by Al Sweigart\n\n**Key Points for the Instructor:**\n\n*   **Hands-on:** Emphasize hands-on coding with lots of examples and exercises.\n*   **Clarity:** Use clear and simple language. Avoid jargon.\n*   **Pacing:** Go at a pace suitable for beginners.\n*   **Debugging:** Teach basic debugging techniques using print statements and the IDE's debugger.\n*   **Motivation:** Keep the course engaging and relevant by showing real-world applications.\n*   **Support:** Encourage questions and provide assistance.\n\n**How to Deliver This Course:**\n\n*   **In-person classes:** You could deliver this in a classroom setting with hands-on activities.\n*   **Online workshops:** Use video conferencing for interactive online sessions.\n*   **Self-paced learning:** Provide the material as a series of modules for students to work through on their own with a forum for questions.\n\nThis detailed outline should provide a great starting point for a comprehensive Python beginner course. Remember to adapt it to the specific needs of your students and always emphasize the importance of practicing and exploring further. Good luck!\n"},
            ],
          },
        ],
      });
    